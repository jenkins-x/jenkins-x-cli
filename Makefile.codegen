CODE_GEN_BIN_NAME := codegen
CODE_GEN_BUILDFLAGS :=
ifdef DEBUG
CODE_GEN_BUILDFLAGS := -gcflags "all=-N -l" $(CODE_GEN_BUILDFLAGS)
endif

build-codegen: ## Build the code generator
	CGO_ENABLED=$(CGO_ENABLED) $(GO) build $(CODE_GEN_BUILDFLAGS) -o build/$(CODE_GEN_BIN_NAME) cmd/codegen/codegen.go

test-codegen: ## Test the code geneator
	CGO_ENABLED=$(CGO_ENABLED) $(GO) test -v -short ./cmd/codegen/...

# Generate go code using generate directives in files and kubernetes code generation
# Anything generated by this target should be checked in
generate: build-codegen generate-mocks generate-openapi generate-client ## Generate the Go code (crds, mocks, openapi, client)
	@$(MAKE) fmt
	@ECHO "Generation complete"

PEGO_MOCK := $(GOPATH)/bin/pegomock
$(PEGO_MOCK):
# Retrieving specific version of pegomock to get patch for https://github.com/petergtz/pegomock/issues/82
	$(GO) get github.com/petergtz/pegomock/...@550445b1b73e8271f397604d4a9bd358de090d89

generate-mocks: $(PEGO_MOCK) go-generate fmt ## Generate the mocks

go-generate:
	@echo "Generating Mocks using pegomock"
	$(GO) generate ./...

generate-client: codegen-clientset fmt ## Generate the client

codegen-clientset: build-codegen ## Generate the k8s types and clients
	@echo "Generating Kubernetes Clients for pkg/apis in pkg/client for jenkins.io:v1"
	./build/$(CODE_GEN_BIN_NAME) clientset --output-package=pkg/client --input-package=pkg/apis --group-with-version=jenkins.io:v1

# Generated docs are not checked in
generate-docs: build-codegen ## Generate the docs
	@echo "Generating HTML docs for Kubernetes Clients"
	./build/$(CODE_GEN_BIN_NAME) docs

generate-openapi: codegen-openapi fmt

codegen-openapi: build-codegen
	@echo "Generating OpenAPI structs for Kubernetes Clients"
	./build/$(CODE_GEN_BIN_NAME) openapi --output-package=pkg/client --input-package=github.com/jenkins-x/jx/pkg/apis --group-with-version=jenkins.io:v1

generate-clean: clean ## Clean the generate code
	rm -f $(GOPATH)/bin/client-gen
	rm -f $(GOPATH)/bin/deepcopy-gen
	rm -f $(GOPATH)/bin/defaulter-gen
	rm -f $(GOPATH)/bin/informer-gen
	rm -f $(GOPATH)/bin/lister-gen
	rm -f $(GOPATH)/bin/openapi-ge
	rm -f $(GOPATH)/bin/gen-apidocs

# Verifies that generated code is in sync with implementation
verify-generation-complete: generate ## Verify the generated code is up to date
	$(eval CHANGED = $(shell git ls-files --modified))
	@if [ "$(CHANGED)" == "" ]; \
      	then \
      	    echo "All generated files up to date"; \
      	else \
      		echo "Code generation is out of date"; \
      		echo "$(CHANGED)"; \
      		exit 1; \
      	fi
