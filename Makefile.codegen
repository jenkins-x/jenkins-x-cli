CODE_GEN_BIN_NAME := codegen
CODE_GEN_BUILDFLAGS :=
ifdef DEBUG
CODE_GEN_BUILDFLAGS := -gcflags "all=-N -l" $(CODE_GEN_BUILDFLAGS)
endif

build-codegen:
	CGO_ENABLED=$(CGO_ENABLED) $(GO) build $(CODE_GEN_BUILDFLAGS) -o build/$(CODE_GEN_BIN_NAME) cmd/codegen/codegen.go

test-codegen:
	CGO_ENABLED=$(CGO_ENABLED) $(GO) test -v -short ./cmd/codegen/...

# Generate go code using generate directives in files and kubernetes code generation
# Anything generated by this target should be checked in
generate: build-codegen generate-mocks generate-openapi generate-client fmt
	@ECHO "Generation complete"

generate-mocks:
	@echo "Generating Mocks using pegomock"
	$(GO_NOMOD) get -d $(PEGOMOCK_PACKAGE)...
	cd $(GOPATH)/src/$(PEGOMOCK_PACKAGE); git checkout master; git fetch origin; git branch -f jx $(PEGOMOCK_SHA); \
	git checkout jx; $(GO_NOMOD) install ./pegomock
	$(GO) generate ./...

generate-client: build-codegen
	@echo "Generating Kubernetes Clients for pkg/apis in pkg/client for jenkins.io:v1"
	./build/$(CODE_GEN_BIN_NAME) clientset --output-package=pkg/client --input-package=pkg/apis --group-with-version=jenkins.io:v1

# Generated docs are not checked in
generate-docs: build-codegen
	@echo "Generating HTML docs for Kubernetes Clients"
	./build/$(CODE_GEN_BIN_NAME) docs

generate-openapi: build-codegen
	@echo "Generating OpenAPI structs for Kubernetes Clients"
	./build/$(CODE_GEN_BIN_NAME) openapi --output-package=pkg/client --input-package=github.com/jenkins-x/jx/pkg/apis --group-with-version=jenkins.io:v1

generate-clean: clean
	rm -f $(GOPATH)/bin/client-gen
	rm -f $(GOPATH)/bin/deepcopy-gen
	rm -f $(GOPATH)/bin/defaulter-gen
	rm -f $(GOPATH)/bin/informer-gen
	rm -f $(GOPATH)/bin/lister-gen
	rm -f $(GOPATH)/bin/openapi-ge
	rm -f $(GOPATH)/bin/gen-apidocs
