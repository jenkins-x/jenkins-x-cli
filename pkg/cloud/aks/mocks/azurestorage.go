// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/jenkins-x/jx/v2/pkg/cloud/aks (interfaces: AzureStorage)

package aks_test

import (
	"reflect"
	"time"

	pegomock "github.com/petergtz/pegomock"
)

type MockAzureStorage struct {
	fail func(message string, callerSkip ...int)
}

func NewMockAzureStorage(options ...pegomock.Option) *MockAzureStorage {
	mock := &MockAzureStorage{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockAzureStorage) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockAzureStorage) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockAzureStorage) ContainerExists(_param0 string) (bool, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockAzureStorage().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("ContainerExists", params, []reflect.Type{reflect.TypeOf((*bool)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 bool
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(bool)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockAzureStorage) CreateContainer(_param0 string) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockAzureStorage().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("CreateContainer", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockAzureStorage) GetStorageAccessKey(_param0 string) (string, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockAzureStorage().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("GetStorageAccessKey", params, []reflect.Type{reflect.TypeOf((*string)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 string
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(string)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockAzureStorage) VerifyWasCalledOnce() *VerifierMockAzureStorage {
	return &VerifierMockAzureStorage{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockAzureStorage) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierMockAzureStorage {
	return &VerifierMockAzureStorage{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockAzureStorage) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierMockAzureStorage {
	return &VerifierMockAzureStorage{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockAzureStorage) VerifyWasCalledEventually(invocationCountMatcher pegomock.Matcher, timeout time.Duration) *VerifierMockAzureStorage {
	return &VerifierMockAzureStorage{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockAzureStorage struct {
	mock                   *MockAzureStorage
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockAzureStorage) ContainerExists(_param0 string) *MockAzureStorage_ContainerExists_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "ContainerExists", params, verifier.timeout)
	return &MockAzureStorage_ContainerExists_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockAzureStorage_ContainerExists_OngoingVerification struct {
	mock              *MockAzureStorage
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockAzureStorage_ContainerExists_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *MockAzureStorage_ContainerExists_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierMockAzureStorage) CreateContainer(_param0 string) *MockAzureStorage_CreateContainer_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "CreateContainer", params, verifier.timeout)
	return &MockAzureStorage_CreateContainer_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockAzureStorage_CreateContainer_OngoingVerification struct {
	mock              *MockAzureStorage
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockAzureStorage_CreateContainer_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *MockAzureStorage_CreateContainer_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}

func (verifier *VerifierMockAzureStorage) GetStorageAccessKey(_param0 string) *MockAzureStorage_GetStorageAccessKey_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "GetStorageAccessKey", params, verifier.timeout)
	return &MockAzureStorage_GetStorageAccessKey_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockAzureStorage_GetStorageAccessKey_OngoingVerification struct {
	mock              *MockAzureStorage
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockAzureStorage_GetStorageAccessKey_OngoingVerification) GetCapturedArguments() string {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *MockAzureStorage_GetStorageAccessKey_OngoingVerification) GetAllCapturedArguments() (_param0 []string) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]string, len(c.methodInvocations))
		for u, param := range params[0] {
			_param0[u] = param.(string)
		}
	}
	return
}
